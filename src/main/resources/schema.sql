create TABLE IF NOT EXISTS PUBLIC.MPA(
	MPA_ID INTEGER NOT NULL AUTO_INCREMENT,
	MPA CHARACTER VARYING(100) NOT NULL,
	CONSTRAINT MPA_PK PRIMARY KEY (MPA_ID)
);


create TABLE IF NOT EXISTS PUBLIC.LIKE_FILMS(
	USER_ID INTEGER NOT NULL,
	FILM_ID INTEGER NOT NULL,
CONSTRAINT LIKE_FILMS_PK PRIMARY KEY (USER_ID,FILM_ID)
);

create TABLE IF NOT EXISTS PUBLIC.USERS(
	USER_ID INTEGER NOT NULL AUTO_INCREMENT,
	EMAIL CHARACTER VARYING(100) NOT NULL,
	LOGIN CHARACTER VARYING(100) NOT NULL,
	NAME CHARACTER VARYING(100) NOT NULL,
	BIRTHDAY DATE NOT NULL,
	CONSTRAINT USERS_PK PRIMARY KEY (USER_ID)
);
create TABLE IF NOT EXISTS PUBLIC.FILMS(
	NAME CHARACTER VARYING(100) NOT NULL,
	description CHARACTER VARYING(200) NOT NULL,
	RELEASE_DATE DATE NOT NULL,
	FILM_ID INTEGER NOT NULL AUTO_INCREMENT,
	DURATION INTEGER,
	RATE INTEGER,
	MPA_ID INTEGER,
	CONSTRAINT FILMS_PK PRIMARY KEY (FILM_ID),
	CONSTRAINT FILMS_FK FOREIGN KEY (MPA_ID) REFERENCES PUBLIC.MPA(MPA_ID) ON delete RESTRICT ON update RESTRICT

);

create TABLE IF NOT EXISTS PUBLIC.GENRE(
	GENRE_ID INTEGER NOT NULL AUTO_INCREMENT,
	GENRE CHARACTER VARYING(100) NOT NULL,
	CONSTRAINT GENRE_PK PRIMARY KEY (GENRE_ID)
);

create TABLE IF NOT EXISTS PUBLIC.FILM_GENRE(
	FILM_ID INTEGER NOT NULL,
	GENRE_ID INTEGER NOT NULL,
	CONSTRAINT FILM_GENRE_FK FOREIGN KEY (FILM_ID) REFERENCES PUBLIC.FILMS(FILM_ID) ON delete RESTRICT ON update RESTRICT,
	CONSTRAINT FILM_GENRE_FK_1 FOREIGN KEY (GENRE_ID) REFERENCES PUBLIC.GENRE(GENRE_ID) ON delete RESTRICT ON update RESTRICT,
	CONSTRAINT PK_FILM_GENRE PRIMARY KEY (FILM_ID,GENRE_ID)
);




create TABLE IF NOT EXISTS PUBLIC.FRIENDSHIP_STATUS(
	FRIENDSHIP_STATUS_ID INTEGER NOT NULL AUTO_INCREMENT,
	FRIENDSHIP_STATUS CHARACTER VARYING NOT NULL,
	CONSTRAINT FRIENDSHIP_STATUS_PK PRIMARY KEY (FRIENDSHIP_STATUS_ID)
);

create TABLE IF NOT EXISTS PUBLIC.FRIENDSHIP(
	USER_ID INTEGER NOT NULL,
	FRIEND_ID INTEGER NOT NULL,
	FRIENDSHIP_STATUS INTEGER NOT NULL,
	CONSTRAINT FRIENDSHIP_FK FOREIGN KEY (USER_ID) REFERENCES PUBLIC.USERS(USER_ID) ON delete RESTRICT ON update RESTRICT,
	CONSTRAINT FRIENDSHIP_FK_1 FOREIGN KEY (FRIEND_ID) REFERENCES PUBLIC.USERS(USER_ID) ON delete RESTRICT ON update RESTRICT,
	CONSTRAINT FRIENDSHIP_FK_2 FOREIGN KEY (FRIENDSHIP_STATUS) REFERENCES PUBLIC.FRIENDSHIP_STATUS(FRIENDSHIP_STATUS_ID) ON delete RESTRICT ON update RESTRICT
);








CREATE UNIQUE INDEX IF NOT EXISTS PRIMARY_KEY_4 ON PUBLIC.USERS (USER_ID);
CREATE UNIQUE INDEX IF NOT EXISTS PRIMARY_KEY_40 ON PUBLIC.GENRE (GENRE_ID);
CREATE INDEX IF NOT EXISTS LIKE_FILMS_FK_1_INDEX_2 ON PUBLIC.LIKE_FILMS (FILM_ID);
CREATE INDEX IF NOT EXISTS LIKE_FILMS_FK_INDEX_2 ON PUBLIC.LIKE_FILMS (USER_ID);
CREATE UNIQUE INDEX  IF NOT EXISTS PRIMARY_KEY_7 ON PUBLIC.FRIENDSHIP_STATUS (FRIENDSHIP_STATUS_ID);
CREATE INDEX IF NOT EXISTS FRIENDSHIP_FK_1_INDEX_B ON PUBLIC.FRIENDSHIP (FRIEND_ID);
CREATE INDEX IF NOT EXISTS FRIENDSHIP_FK_2_INDEX_B ON PUBLIC.FRIENDSHIP (FRIENDSHIP_STATUS);
CREATE INDEX IF NOT EXISTS FRIENDSHIP_FK_INDEX_B ON PUBLIC.FRIENDSHIP (USER_ID);
CREATE INDEX IF NOT EXISTS FILMS_FK_INDEX_3 ON PUBLIC.FILMS (MPA);
CREATE UNIQUE INDEX IF NOT EXISTS PRIMARY_KEY_3 ON PUBLIC.FILMS (FILM_ID);
CREATE INDEX IF NOT EXISTS FILM_GENRE_FK_1_INDEX_7 ON PUBLIC.FILM_GENRE (GENRE_ID);
CREATE INDEX IF NOT EXISTS FILM_GENRE_FK_INDEX_7 ON PUBLIC.FILM_GENRE (FILM_ID);
CREATE UNIQUE INDEX IF NOT EXISTS PRIMARY_KEY_8 ON PUBLIC.MPA (MPA_ID);